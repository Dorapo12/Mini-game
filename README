Этот код представляет собой простую текстовую ролевую игру, где игрок сражается против врага. 
Игрок может атаковать или лечиться, а враг делает то же самое, пока один из них не проиграет.


// Написал строчки Ваня Безус
#include <iostream> // Библиотека для работы с вводом/выводом данных 
#include <ctime> // Библиотека для работы со временем 
 
using namespace std; // Использует пространство имен `std` для сокращения записи 
 
double HisHelth = 100; //здоровье противника
double MyHelth = 100;  //моё здоровье 
double HisDamage = 10; //  урон противника
double MyDamage = 10; // мой урон
double HisHeal = 20; // Количество здоровья, которое восстанавливает противник за один ход
double MyHeal = 20; // Количество здоровья, которое восстанавливаете вы за один ход
 
void HISDamage(double& HisDamage, double& MyHelth) // Функция, которая моделирует атаку противника
{
    int CritChance = rand() % 6; // Генерирует случайное число от 0 до 5 (для определения критического удара)
    double Crit = HisDamage * 1.5; //  Урон при критическом ударе (в 1.5 раза больше обычного)
 
    if (CritChance == 0 || 2 || 4) // Проверяет, произошел ли критический удар
    {
        MyHelth = MyHelth - Crit; //  Снимает с вас здоровье в случае критического удара
        cout << "Enemy damage you by " << Crit << endl; // Выводит сообщение о критическом ударе
        cout << "Your Healt now is " << MyHelth << endl; // Выводит ваше текущее здоровье
    }
    else
    {
        MyHelth = MyHelth - HisDamage; // Снимает с вас здоровье в случае обычного удара
        cout << "Enemy damage you by " << HisDamage << endl; // Выводит сообщение об обычном ударе
        cout << "Your Healt now is " << MyHelth << endl; // Выводит ваше текущее здоровье
    };
};
 
void HISHeal(double& HisHeal, double& HisHelth) // Функция, которая моделирует восстановление здоровья противника
{
    int CritChance = rand() % 6; // Генерирует случайное число от 0 до 5 (для определения критического лечения)
    double Crit = HisHeal * 1.5; // Количество здоровья, восстанавливаемое при критическом лечении (в 1.5 раза больше обычного)
 
    if (CritChance == 0 || 2 || 4) // Проверяет, произошло ли критическое лечение
    {
        HisHelth = HisHelth + Crit; // Восстанавливает здоровье противника в случае критического лечения
        cout << "The Enemy was healing by " << Crit << endl; // Выводит сообщение о критическом лечении
        cout<< "Enemy's Helth now is " << HisHelth << endl; // Выводит текущее здоровье противника
    }
    else
    {                                                                   
        HisHelth = HisHelth + HisHeal; // Восстанавливает здоровье противника в случае обычного лечения
        cout << "The Enemy was healing by " << HisHeal << endl; // Выводит сообщение о обычном лечении           
        cout << "Enemy's Helth now is " << HisHelth << endl; // Выводит текущее здоровье противника
    };
};
// Написал Артём Иванычев
int Enemy() // Функция, которая моделирует ход противника
{
    if (HisHelth <= 0) // Проверяет, жив ли противник
        cout << "The Enemy is fall! U win!!!" << endl; // Выводит сообщение о победе
    else
    {
        int Action = rand() % 3; // Выбирает случайное действие (0, 1 или 2)
 
        if (HisHelth >= 130) // Проверяет, если у противника очень много здоровья, он всегда будет атаковать
            Action = 0;
 
        switch (Action)
        {
        case 0 || 1: // Если случайное число 0 или 1 - противник атакует
            HISDamage(HisDamage, MyHelth);
            break;
        case 2: // Если случайное число 2 - противник лечится
            HISHeal(HisHeal, HisHelth);
            break;
        default: // В случае ошибки - противник атакует
            HISDamage(HisDamage, MyHelth);
                break;
        };
    };
 
    if (HisHelth <= 0) // Еще раз проверяет, жив ли противник (на случай, если он умер после хода)
        cout << "The Enemy is fall! U win!!!" << endl; // Выводит сообщение о победе
 
    return 0; // Возвращает 0, сигнализируя о том, что все прошло нормально
 
};
 
void MYDamage(double& MyDamage, double& HisHelth) // Функция, которая моделирует вашу атаку
{
    int CritChance = rand() % 6; // Генерирует случайное число от 0 до 5 (для определения критического удара)
    double Crit = MyDamage * 1.5; // Урон при критическом ударе (в 1.5 раза больше обычного)
 
    if (CritChance == 0 || 2 || 4) // Проверяет, произошел ли критический удар
    {
        HisHelth = HisHelth - Crit; // Снимает с противника здоровье в случае критического удара

        cout << "U damage Enemy by " << Crit << endl; // Выводит сообщение о критическом ударе
        cout << "Enemy's Healt now is " << HisHelth << endl; // Выводит текущее здоровье противника
    }
    else 
    {
        HisHelth = HisHelth - MyDamage; // Снимает с противника здоровье в случае обычного удара
        cout << "U damage Enemy by " << MyDamage << endl; // Выводит сообщение об обычном ударе
        cout << "Enemy's Healt now is " << HisHelth << endl; // Выводит текущее здоровье противника
    };
};
// Написал Артём Зимнухов
void MYHeal(double& MyHeal, double& MyHelth) // Функция, которая моделирует ваше лечение
{
    int CritChance = rand() % 6; // Генерирует случайное число от 0 до 5 (для определения критического лечения)
    double Crit = MyHeal * 1.5; // Количество здоровья, восстанавливаемое при критическом лечении (в 1.5 раза больше обычного)
 
    if (CritChance == 0 || 2 || 4) // Проверяет, произошло ли критическое лечение
    {
        MyHelth = MyHelth + Crit; // Восстанавливает ваше здоровье в случае критического лечения
        cout << "You was healing yourself by " << Crit << endl; // Выводит сообщение о критическом лечении
        cout << "Yours Helth now is " << MyHelth << endl; // Выводит ваше текущее здоровье
    }
    else
    {
        MyHelth = MyHelth + MyHeal; // Восстанавливает ваше здоровье в случае обычного лечения
        cout << "You was healing yourself by " << MyHeal << endl; // Выводит сообщение об обычном лечении
        cout << "Yours Helth now is " << MyHelth << endl; // Выводит ваше текущее здоровье

    };
};
 
int MySelf() // Функция, которая моделирует ваш ход
{
    if (MyHelth <= 0) // Проверяет, живы ли вы
        cout << "U're dead!!! Enemy win!!!" << endl; // Выводит сообщение о проигрыше
 
            int MyAction = 0; // Переменная для хранения вашего действия (1 - атака, 2 - лечение)
            cout << "What are You want to do? 1 - Damage, 2 - Heal..." << endl; // Просит вас выбрать действие
            cin >> MyAction; // Читает ваше действие из консоли
 
        
            switch (MyAction)
            {
            case 1:
                MYDamage(MyDamage, HisHelth); // Выполняет вашу атаку
                break;
            case 2:
                MYHeal(MyHeal, MyHelth); // Если вы выбрали лечение
                break;
 
            default: // Если вы ввели неправильное действие - повторяет ход
                MySelf();
                break;
            };
 
    if (MyHelth <= 0) // Еще раз проверяет, живы ли вы (на случай, если вы умерли после хода)
        cout << "U're dead!!! Enemy win!!!" << endl;
// Написал Матюшин Ваня
    return 0; // Возвращает, сигнализируя о том, что все прошло нормально
};
 
int Game() // Функция, которая запускает игру
{
    MySelf(); // Выполняет ваш ход
 
    Enemy(); // Выполняет ход противника
 
    if ((MyHelth <= 0) || (HisHelth <= 0)) // Проверяет, закончилась ли игра (кто-то умер)
    {
        cout << "Game Over" << endl; // Выводит сообщение о завершении игры
        return 0; // Завершает игру
    }
    else
    {
        return Game(); // Продолжает игру
    };
 
};
 
int main()
{
    int srand((unsigned int)time(NULL)); // Инициализирует генератор случайных чисел (для получения разных случайных значений каждый раз)
 
    Game(); // Запускает игру
 
    return 0; // Возвращает 0, сигнализируя о том, что программа завершилась успешно
}
